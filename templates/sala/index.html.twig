{% extends 'base.html.twig' %}

{% block title %}Control de Salas{% endblock %}

{% block stylesheets %}
  {{ parent() }}
  <style>
    .sala .departamento-select {
      margin-top: 5px; /* Espaciado entre el texto de la sala y el select */
      width: 80%; /* Ajusta el ancho del select para que no ocupe todo el espacio */
      padding: 5px; /* Agrega un poco de relleno interior */
      border-radius: 3px; /* Bordes redondeados */
      border: 1px solid #ccc; /* Borde suave */
      background-color: rgba(255, 255, 255, 0.7); /* Fondo semitransparente */
      color: #333; /* Color de texto oscuro */
      text-align: center; /* Centra el texto dentro del select */
      appearance: none; /* Quita el estilo predeterminado del navegador */
      -webkit-appearance: none; /* Para navegadores basados en WebKit */
      -moz-appearance: none; /* Para Firefox */
      transition: all 0.3s ease; /* Transición suave para cambios de estado */
      cursor: pointer;
    }

    /* Al centrar el contenido del select */
    .sala .departamento-select option {
      cursor: pointer;
      text-align: center; /* Centra el texto de las opciones */
    }

    /* Cuando se enfoca el select */
    .sala .departamento-select:focus {
      cursor: pointer;
      outline: none; /* Elimina el contorno al hacer clic */
      border-color: #888; /* Cambia el color del borde al enfocar */
      box-shadow: 0 0 5px rgba(0, 0, 0, 0.2); /* Agrega una sombra ligera */
    }

    .sala-map-container {
      display: flex;
      justify-content: space-around;
      position: relative;
      width: 800px;
      height: 500px;
      background-size: contain;
      margin: 0 auto;
      border: 1px solid #ccc;
      flex-wrap: wrap;
    }

    .sala {
      flex: 1 0 calc(33.333% - 20px); /* 33.33% del ancho menos los márgenes */
     
      height: 150px;
      border-radius: 10px;
      display: flex;
      align-items: center;
      justify-content: center;
      text-align: center;
      font-weight: bold;
      flex-direction: column;
      transition: all 0.3s ease;
    }

    .sala-inactive {
      background-color: #aaa;
      color: #333;
    }

    .sala-active {
      background-color: #5cb85c;
      color: white;
    }

    .sala:hover {
      transform: scale(1.05);
    }

    .control-panel {
      margin-top: 20px;
      padding: 20px;
      border: 1px solid #ddd;
      border-radius: 5px;
    }

    .status-log {
      margin-top: 20px;
      padding: 10px;
      border: 1px solid #ddd;
      height: 150px;
      overflow-y: auto;
      font-family: monospace;
    }

    .refresh-indicator {
      position: fixed;
      top: 10px;
      right: 10px;
      padding: 5px 10px;
      background-color: #f8f9fa;
      border-radius: 3px;
      border: 1px solid #ddd;
      font-size: 12px;
    }

    .sala .departamento-select {
      margin-top: 5px;
      padding: 5px;
      width: 100%;
      border-radius: 3px;
      border: 1px solid #ccc;
    }

    .sala .departamento-select:focus {
      outline: none;
      border-color: #888;
    }
  </style>
{% endblock %}

{% block body %}
  <div class="container mt-4">
    <div class="refresh-indicator" id="refresh-indicator">
      Actualizando...
    </div>
    <h1 class="text-center mb-4">Control de Salas</h1>
    <div class="sala-map-container" id="sala-map">
      {% for sala in salas %}
        <div class="sala sala-active {#{% if salas['Palomar'] %}sala-active{% else %}sala-inactive{% endif %} vlan-{{ salas['Palomar']|default('0') }}#}" id="sala-{{ sala.id }}" data-sala-id="{{ sala.id }}">
          <div class="sala-nombre">{{ sala.nombre }}</div>
          <select class="departamento-select">
            {% for consejeria in consejerias %}
              <option value="{{ consejeria['vlanId'] }} {{ sala.puertos }}">{{ consejeria['nombre'] }}</option >
            {% endfor %}
          </select>
        </div> 
      {% endfor %}
    </div>

    <div class="control-panel">
      <h3>Registro de Operaciones</h3>
      <div class="status-log" id="status-log">
        <!-- Aquí se mostrarán los logs de operaciones -->
      </div>
    </div>
  </div>
{% endblock %}

{% block javascripts %}
  {{ parent() }}
  <script>
    document.addEventListener('DOMContentLoaded', function () {
      // Estado local de las salas
    {#  const salasStatus = {
              {% for salas  in salasStatus %}
                          '{{ sala }}':{{ status ? 'true' : 'false' }},
              {% endfor %}
          };#}


              const refreshIndicator = document.getElementById('refresh-indicator');
              refreshIndicator.style.display = 'none';

              // Manejador para el clic en las salas
              document.querySelectorAll('.departamento-select').forEach(salaElement => {
                salaElement.addEventListener('change', function () {
                  const salaId = this.dataset.salaId;
                  toggleSala(salaId);
                });
              });

              // Función para activar/desactivar una sala
              function toggleSala(salaId) {
                // Obtener el valor seleccionado del desplegable
                const selectedValue = this.querySelector('.departamento-select').value;

                addLogMessage(`Procesando sala ${salaId}...`);

                fetch('/toggle-sala', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json',
                  },
                  body: JSON.stringify({
                    sala: salaId,
                    departamento: selectedValue // Valor del desplegable
                  })
                })
                // ... (resto del código)
              }

              // Función para actualizar el estado de todas las salas
              function updateSalasStatus() {
                refreshIndicator.style.display = 'block';

                fetch('/get-salas-status')
                        .then(response => response.json())
                        .then(data => {
                          if (data.error) {
                            addLogMessage(`Error: ${data.error}`, 'error');
                            return;
                          }

                          // Actualizar estados
                          for (const [salaId, status] of Object.entries(data)) {
                            updateSalaUI(salaId, status);
                          }

                          refreshIndicator.style.display = 'none';
                          addLogMessage('Estados de sala actualizados');
                        })
                        .catch(error => {
                          refreshIndicator.style.display = 'none';
                          addLogMessage(`Error al actualizar estados: ${error.message}`, 'error');
                        });
              }

              // Actualizar el UI de una sala
              function updateSalaUI(salaId, status) {
                const salaElement = document.querySelector(`[data-sala-id="${salaId}"]`);
                if (!salaElement)
                  return;

                if (status) {
                  salaElement.classList.remove('sala-inactive');
                  salaElement.classList.add('sala-active');
                } else {
                  salaElement.classList.remove('sala-active');
                  salaElement.classList.add('sala-inactive');
                }

                // También actualizar el borde según VLAN
                // Aquí necesitamos el valor de VLAN que vendría en una respuesta extendida
                // Por ahora solo actualizamos el estado activo/inactivo
              }

              // Añadir mensaje al log
              function addLogMessage(message, type = 'info') {
                const logElement = document.getElementById('status-log');
                const timestamp = new Date().toLocaleTimeString();
                const messageElement = document.createElement('div');
                messageElement.className = `log-entry log-${type}`;
                messageElement.textContent = `[${timestamp}] ${message}`;
                logElement.appendChild(messageElement);
                logElement.scrollTop = logElement.scrollHeight;
              }

              // Configurar actualización periódica (cada minuto)
              setInterval(updateSalasStatus, 60000);

              // Actualizar estados al cargar la página
              addLogMessage('Inicializando control de salas...');
              setTimeout(updateSalasStatus, 1000);
            });
  </script>
{% endblock %}